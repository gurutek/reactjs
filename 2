import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;

import java.util.*;

public class StackToTextWithParents {
    public static void main(String[] args) {
        String html = "<p>i<a href=\"#\">example</a> there<strong><em> test</em></strong></p><p> ghh<em>ghhhj</em> ghjjjj <strong> ghhh</strong></p>";

        Stack<StackItem> stack = parseHtmlToStack(html);

        Map<String, List<String>> textWithParents = convertStackToTextWithParents(stack);

        for (Map.Entry<String, List<String>> entry : textWithParents.entrySet()) {
            System.out.println("Text: " + entry.getKey() + ", Parents: " + entry.getValue());
        }
    }

    private static Stack<StackItem> parseHtmlToStack(String html) {
        Stack<StackItem> stack = new Stack<>();
        Document doc = Jsoup.parse(html);
        Element body = doc.body();
        parseNodes(body.childNodes(), stack, new ArrayList<>());
        return stack;
    }

    private static void parseNodes(Iterable<Node> nodes, Stack<StackItem> stack, List<String> parents) {
        for (Node node : nodes) {
            if (node instanceof TextNode) {
                String text = ((TextNode) node).text();
                if (!text.trim().isEmpty()) {
                    stack.push(new StackItem(StackItemType.TEXT, text, new ArrayList<>(parents)));
                }
            } else if (node instanceof Element) {
                Element element = (Element) node;
                String tagName = element.tagName();
                if ("a".equals(tagName)) {
                    String text = element.text();
                    String link = element.attr("href");
                    String linkText = text + " (" + link + ")";
                    stack.push(new StackItem(StackItemType.TAG_OPEN, tagName, new ArrayList<>(parents)));
                    stack.push(new StackItem(StackItemType.TEXT, linkText, new ArrayList<>(parents)));
                    parseNodes(element.childNodes(), stack, parents);
                    stack.push(new StackItem(StackItemType.TAG_CLOSE, tagName, new ArrayList<>(parents)));
                } else {
                    parents.add(tagName);
                    stack.push(new StackItem(StackItemType.TAG_OPEN, tagName, new ArrayList<>(parents)));
                    parseNodes(element.childNodes(), stack, parents);
                    parents.remove(parents.size() - 1);
                    stack.push(new StackItem(StackItemType.TAG_CLOSE, tagName, new ArrayList<>(parents)));
                }
            }
        }
    }

    private static Map<String, List<String>> convertStackToTextWithParents(Stack<StackItem> stack) {
        Map<String, List<String>> textWithParents = new HashMap<>();
        Stack<String> openTags = new Stack<>();

        while (!stack.isEmpty()) {
            StackItem item = stack.pop();
            if (item.type == StackItemType.TEXT) {
                if (item.value.equals("\n")) {
                    continue;
                }
                StringBuilder parentsBuilder = new StringBuilder();
                for (String parent : item.parents) {
                    parentsBuilder.append(parent).append(" ");
                }
                textWithParents.put(item.value, Arrays.asList(parentsBuilder.toString().trim().split(" ")));
            } else if (item.type == StackItemType.TAG_OPEN) {
                openTags.push(item.value);
            } else if (item.type == StackItemType.TAG_CLOSE) {
                if (!openTags.isEmpty()) {
                    String tagName = openTags.peek();
                    if (tagName.equals("p")) {
                        stack.push(new StackItem(StackItemType.TEXT, "\n", new ArrayList<>(Arrays.asList(tagName))));
                    }
                    openTags.pop();
                }
            }
        }

        return textWithParents;
    }
}

class StackItem {
    StackItemType type;
    String value;
    List<String> parents;

    StackItem(StackItemType type, String value, List<String> parents) {
        this.type = type;
        this.value = value;
        this.parents = parents;
    }
}

enum StackItemType {
    TAG_OPEN,
    TAG_CLOSE,
    TEXT
}
