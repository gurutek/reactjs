const CLIENT_ID = 'YOUR_CLIENT_ID';
const CLIENT_SECRET = 'YOUR_CLIENT_SECRET';
const REDIRECT_URI = chrome.identity.getRedirectURL();
const SCOPES = 'https://www.googleapis.com/auth/userinfo.profile';
const AUTH_URL = `https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES}`;
const TOKEN_URL = 'https://oauth2.googleapis.com/token';

chrome.runtime.onInstalled.addListener(() => {
  console.log('Extension installed');
});

function launchAuthFlow(interactive) {
  chrome.identity.launchWebAuthFlow(
    {
      'url': AUTH_URL,
      'interactive': interactive
    },
    function (redirectUrl) {
      if (chrome.runtime.lastError) {
        console.error(chrome.runtime.lastError);
        return;
      }

      const url = new URL(redirectUrl);
      const code = url.searchParams.get('code');
      exchangeCodeForToken(code);
    }
  );
}

function exchangeCodeForToken(code) {
  fetch(TOKEN_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: new URLSearchParams({
      code: code,
      client_id: CLIENT_ID,
      client_secret: CLIENT_SECRET,
      redirect_uri: REDIRECT_URI,
      grant_type: 'authorization_code'
    })
  })
  .then(response => response.json())
  .then(data => {
    chrome.storage.local.set({oauth: data});
    console.log('Access Token:', data.access_token);
  })
  .catch(error => {
    console.error('Error fetching the access token:', error);
  });
}

function refreshAccessToken(refreshToken) {
  fetch(TOKEN_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: new URLSearchParams({
      refresh_token: refreshToken,
      client_id: CLIENT_ID,
      client_secret: CLIENT_SECRET,
      grant_type: 'refresh_token'
    })
  })
  .then(response => response.json())
  .then(data => {
    chrome.storage.local.set({oauth: data});
    console.log('New Access Token:', data.access_token);
  })
  .catch(error => {
    console.error('Error refreshing the access token:', error);
  });
}

function getAuthToken() {
  chrome.storage.local.get('oauth', (result) => {
    if (result.oauth) {
      const oauth = result.oauth;
      if (oauth.expires_in && new Date().getTime() / 1000 > oauth.expires_in) {
        console.log('Access token expired, refreshing...');
        refreshAccessToken(oauth.refresh_token);
      } else {
        console.log('Using existing access token:', oauth.access_token);
      }
    } else {
      launchAuthFlow(true);
    }
  });
}

chrome.action.onClicked.addListener(() => {
  getAuthToken();
});

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'login') {
    getAuthToken();
  }
});
