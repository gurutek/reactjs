import React, { useEffect, useRef } from 'react';
import LazyLoad from 'react-lazy-load-image-component';
import styled, { keyframes } from 'styled-components';
import Button from '@mui/material/Button';

const slideIn = keyframes`
  0% {
    transform: translateX(-50px);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
`;

const bounce = keyframes`
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
`;

const fadeOut = keyframes`
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
`;

const Container = styled.div`
  display: flex;
  align-items: center;
  padding: 20px;
`;

const Logo = styled.img`
  height: 50px;
  margin-right: 10px;
`;

const Title = styled.span`
  font-size: 1.5rem;
`;

const Letter = styled.span`
  display: inline-block;
  opacity: 0;
`;

const AnimatedLogoTitle = ({ logoSrc, title }) => {
  const titleRef = useRef(null);

  useEffect(() => {
    const animateTitle = () => {
      const titleElement = titleRef.current;
      titleElement.innerHTML = '';  // Clear any existing letters

      title.split('').forEach((letter, index) => {
        const span = document.createElement('span');
        span.className = 'letter';
        span.style.animation = `
          ${slideIn} 0.5s forwards ${index * 0.1}s,
          ${fadeOut} 0.5s forwards ${title.length * 0.1 + 2.5}s
        `;
        span.textContent = letter;
        titleElement.appendChild(span);
      });

      setTimeout(() => {
        const letters = titleElement.querySelectorAll('.letter');
        letters.forEach(letter => {
          if (Math.random() > 0.5) {
            letter.style.animation += `, ${bounce} 2s infinite ${title.length * 0.1 + 0.5}s`;
          }
        });
      }, title.length * 100); // Add bounce animation after all letters have slid in

      setTimeout(animateTitle, (title.length * 0.1 + 3) * 1000);  // Restart the animation
    };

    animateTitle();
  }, [title]);

  return (
    <Button variant="contained" disableElevation>
      <LazyLoad
        height={50}
        width={50}
        debounceTime={500}
        placeholder={<Logo src={logoSrc} alt="Logo" />}
        src={logoSrc}
        effect="blur"
      />
      <Title ref={titleRef}>{title}</Title>
    </Button>
  );
};

export default AnimatedLogoTitle;
