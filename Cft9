AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # S3 Bucket
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: your-unique-bucket-name  # Replace with a unique bucket name

  # S3 Bucket Policy to allow the specific AWS account to access the bucket
  LambdaCodeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LambdaCodeBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::YOUR_ACCOUNT_ID:root  # Replace with the specific account ID
            Action: "s3:*"
            Resource: 
              - !Sub arn:aws:s3:::${LambdaCodeBucket}
              - !Sub arn:aws:s3:::${LambdaCodeBucket}/*

  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to Lambda functions
      VpcId: vpc-12345678  # Replace with your existing VPC ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  # Lambda Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 
                  - !Sub arn:aws:s3:::${LambdaCodeBucket}/*

  # Lambda Function
  RedirectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: com.example.RedirectHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: your-code.jar  # Replace with your JAR file key
      Runtime: java11
      MemorySize: 512
      Timeout: 10
      VpcConfig:
        SubnetIds:
          - subnet-12345678  # Replace with your existing Subnet ID
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ShortLinkApi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: shortlink
      RestApiId: !Ref ApiGateway

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt RedirectFunction.Arn

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
    DependsOn: ApiGatewayMethod

Outputs:
  ApiUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/shortlink"
