AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Single stack template for short link resolver app with VPC, Lambda, RDS, and ElastiCache.

Parameters:
  BucketName:
    Type: String
    Description: S3 bucket name for Lambda code.

  AccountId:
    Type: String
    Default: !Sub '${AWS::AccountId}'
    Description: AWS Account ID where resources will be deployed.

  DBUsername:
    Type: String
    Description: Username for RDS database.

  DBPassword:
    Type: String
    NoEcho: true
    Description: Password for RDS database.

  RedisUsername:
    Type: String
    Description: Username for Redis cache.

  RedisPassword:
    Type: String
    NoEcho: true
    Description: Password for Redis cache.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: ShortLinkVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for public access to ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for internal access to RDS and ElastiCache
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ShortLinkResolver
      Handler: index.handler
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Ref BucketName
        S3Key: code.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticache:*
                Resource: '*'

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.large
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: 50
      DBInstanceIdentifier: shortlink-db
      VPCSecurityGroups:
        - !Ref PrivateSecurityGroup

  RedisCache:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.medium
      Engine: redis
      CacheClusterId: shortlink-cache
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !Ref PrivateSecurityGroup
      AutoMinorVersionUpgrade: true
      PreferredMaintenanceWindow: Sun:05:00-Sun:09:00

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
  LambdaRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
  RDSInstanceEndpoint:
    Value: !GetAtt RDSInstance.Endpoint.Address
  RedisCacheEndpoint:
    Value: !GetAtt RedisCache.RedisEndpoint.Address
